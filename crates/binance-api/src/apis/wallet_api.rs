/*
 * Binance Public Spot API
 *
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */
use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use chrono::Utc;
use hmac::{Hmac, Mac};
use reqwest;
use serde::{Deserialize, Serialize};
use sha2::Sha256;

/// struct for typed errors of method [`sapi_v1_asset_wallet_balance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SapiV1AssetWalletBalanceGetError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

fn calculate_signature(message: &str, secret_key: &str) -> String {
    // Create an HMAC-SHA256 instance
    let mut mac = Hmac::<Sha256>::new_from_slice(secret_key.as_bytes())
        .expect("HMAC can take a key of any size");

    // Process the message
    mac.update(message.as_bytes());

    // Get the resulting HMAC as bytes
    let result = mac.finalize();

    format!("{:x}", result.into_bytes())
}

/// Query User Wallet Balance  Weight(IP): 60
pub async fn sapi_v1_asset_wallet_balance_get(
    configuration: &configuration::Configuration,
    secret_key: &str,
    recv_window: Option<i64>,
) -> Result<
    Vec<models::SapiV1AssetWalletBalanceGet200ResponseInner>,
    Error<SapiV1AssetWalletBalanceGetError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/sapi/v1/asset/wallet/balance",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = recv_window {
        local_var_req_builder =
            local_var_req_builder.query(&[("recvWindow", &local_var_str.to_string())]);
    }
    local_var_req_builder =
        local_var_req_builder.query(&[("timestamp", &Utc::now().timestamp_millis())]);

    let signature = {
        calculate_signature(
            &local_var_req_builder
                .try_clone()
                .unwrap()
                .build()?
                .url()
                .query()
                .unwrap(),
            &secret_key,
        )
    };

    local_var_req_builder = local_var_req_builder.query(&[("signature", &signature)]);

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-MBX-APIKEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SapiV1AssetWalletBalanceGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
